# Load necessary libraries
library(MASS)
library(stats)
library(ggplot2)

set.seed(123)

# Simulation parameters
n_simulations <- 1000
sample_sizes <- c(500, 1000, 1500, 2000)
alpha_01 <- 0.5
beta_01 <- 0.3
alpha_11 <- 0.5
alpha_1 <- 0.5
beta_1 <- 0.2
beta_differences <- seq(0.2, 0.5, by = 0.1)  # Difference between beta_01 and beta_11

generate_data <- function(N, beta_01, beta_11) {
  x1 <- rnorm(N)
  x <- as.matrix(cbind(1, x1))
  pi01 <- plogis(alpha_01 + beta_01 * x1)
  pi11 <- plogis(alpha_11 + beta_11 * x1)
  pi00 <- 1 - pi01
  pi10 <- 1 - pi11
  pi1 <- plogis(alpha_1 + beta_1 * x1)
  P01 <- pi01 * (1 - pi1)
  P00 <- pi00 * (1 - pi1)
  P11 <- pi11 * pi1
  P10 <- pi10 * pi1
  P <- cbind(P01, P00, P11, P10)
  Y <- t(apply(P, 1, function(row_probs) rmultinom(1, n = 1, prob = row_probs)))
  y1 <- numeric(nrow(Y))
  y2 <- numeric(nrow(Y))
  for (i in seq_len(nrow(Y))) {
    if (Y[i, 1] == 1) {
      y1[i] <- 0
      y2[i] <- 1
    } else if (Y[i, 2] == 1) {
      y1[i] <- 0
      y2[i] <- 0
    } else if (Y[i, 3] == 1) {
      y1[i] <- 1
      y2[i] <- 1
    } else if (Y[i, 4] == 1) {
      y1[i] <- 1
      y2[i] <- 0
    } else {
      y1[i] <- 0
      y2[i] <- 0
    }
  }
  return(list(y1 = y1, y2 = y2, x1 = x1))
}

GBBM1<-function(x1,y1,y2,z)
{
  x<-as.matrix(cbind(1,x1))
  y<-t(x)
  beta01<-c(rep(0,z))
  beta11<-c(rep(0,z))
  beta1<-c(rep(0,z))
  beta<-c(beta01,beta11,beta1)
  p01<-(exp(x%*%beta01))/(1+exp(x%*%beta01))	
  p11<-(exp(x%*%beta11))/(1+exp(x%*%beta11))
  p1<-(exp(x%*%beta1))/(1+exp(x%*%beta1))
  score.beta01<-c()
  for(k in 1:length(beta01))
  {
    score.beta01[k]=-sum(x[,k]*(1-y1)*(p01-y2))
  }
  score.beta01
  score.beta11<-c()
  for(k in 1:length(beta11))
  {
    score.beta11[k]=-sum(x[,k]*y1*(p11-y2))
  }
  score.beta11
  score.beta1<-c()
  for(k in 1:length(beta1))
  {
    score.beta1[k]=-sum(x[,k]*(p1-y1))
  }
  score.beta1
  score.beta<-c(score.beta01,score.beta11,score.beta1)
  inf.beta01=matrix(0,z,z)
  for(l in 1:z)
  {
    for(m in 1:z)
    {
      inf.beta01[l,m]=sum(y[l,]*x[,m]*(1-y1)*p01*(1-p01))
    }
  }
  inf.beta01
  inf.beta11=matrix(0,z,z)
  for(l in 1:z)
  {
    for(m in 1:z)
    {
      inf.beta11[l,m]=sum(y[l,]*x[,m]*y1*p11*(1-p11))
    }
  }
  inf.beta11
  inf.beta1=matrix(0,z,z)
  for(l in 1:z)
  {
    for(m in 1:z)
    {
      inf.beta1[l,m]=sum(y[l,]*x[,m]*p1*(1-p1))
    }
  }
  inf.beta1
  C=matrix(0,nrow=nrow(inf.beta01),ncol=ncol(inf.beta01))
  inf.beta=cbind(rbind(inf.beta01,C,C),rbind(C,inf.beta11,C),rbind(C,C,inf.beta1))
  d<-det(inf.beta)
  beta.hat<-beta+((solve(inf.beta))%*%(score.beta))
  count=1
  print(count)
  OrChk=function(beta,beta.hat)
  {
    p=length(beta)
    b=abs(beta[1]-beta.hat[1])>.0001
    if(b=="FALSE")
    {
      for(i in 2:p)
      {
        b=b|(abs(beta[i]-beta.hat[i])>.0001)
        if(b=="TRUE") break
      }
    }
    b
  }
  while(OrChk(beta,beta.hat))
  {
    beta01<-c(beta.hat[1:z])
    beta11<-c(beta.hat[(z+1):(z+z)])
    beta1<-c(beta.hat[(z+z+1):(z+z+z)])
    beta<-c(beta01,beta11,beta1)
    p01<-(exp(x%*%beta01))/(1+exp(x%*%beta01))
    p11<-(exp(x%*%beta11))/(1+exp(x%*%beta11))
    p1<-(exp(x%*%beta1))/(1+exp(x%*%beta1))
    score.beta01<-c()
    for(k in 1:length(beta01))
    {
      score.beta01[k]=-sum(x[,k]*(1-y1)*(p01-y2))
    }
    score.beta01
    score.beta11<-c()
    for(k in 1:length(beta11))
    {
      score.beta11[k]=-sum(x[,k]*y1*(p11-y2))
    }
    score.beta11
    score.beta1<-c()
    for(k in 1:length(beta1))
    {
      score.beta1[k]=-sum(x[,k]*(p1-y1))
    }
    score.beta1
    score.beta<-c(score.beta01,score.beta11,score.beta1)
    inf.beta01=matrix(0,z,z)
    for(l in 1:z)
    {
      for(m in 1:z)
      {
        inf.beta01[l,m]=sum(y[l,]*x[,m]*(1-y1)*p01*(1-p01))
      }
    }
    inf.beta01
    inf.beta11=matrix(0,z,z)
    for(l in 1:z)
    {
      for(m in 1:z)
      {
        inf.beta11[l,m]=sum(y[l,]*x[,m]*y1*p11*(1-p11))
      }
    }
    inf.beta11
    inf.beta1=matrix(0,z,z)
    for(l in 1:z)
    {
      for(m in 1:z)
      {
        inf.beta1[l,m]=sum(y[l,]*x[,m]*p1*(1-p1))
      }
    }
    inf.beta1
    C=matrix(0,nrow=nrow(inf.beta01),ncol=ncol(inf.beta01))
    inf.beta=cbind(rbind(inf.beta01,C,C),rbind(C,inf.beta11,C),rbind(C,C,inf.beta1))
    d<-det(inf.beta)
    beta.hat<-beta+((solve(inf.beta))%*%(score.beta))
    count=count+1
    print(count)
  }
  est<-beta.hat
  sd<-sqrt(diag(solve(inf.beta)))
  w<-est/sd
  var<-diag(solve(inf.beta))
  pval<-2*(1-pnorm(abs(w)))
  b01<-beta.hat[1:z]
  ob01<-exp(b01)
  s01<-sd[1:z]
  pv01<-pval[1:z]
  b11<-beta.hat[(z+1):(z+z)]
  ob11<-exp(b11)
  s11<-sd[(z+1):(z+z)]
  pv11<-pval[(z+1):(z+z)]
  b1<-beta.hat[(z+z+1):(z+z+z)]
  ob1<-exp(b1)
  s1<-sd[(z+z+1):(z+z+z)]
  pv1<-pval[(z+z+1):(z+z+z)]
  var.b01<-solve(inf.beta01)
  var.b11<-solve(inf.beta11)
  mat<-var.b01+var.b11
  chisq<-(t(b01-b11))%*%solve(mat)%*%(b01-b11)
  chisq
  Pval<-pchisq(chisq,z,lower.tail=0)
  Pval
  p01<-(exp(x%*%b01))/(1+exp(x%*%b01))
  p00<-1-p01
  p11<-(exp(x%*%b11))/(1+exp(x%*%b11))
  p10<-1-p11
  p1<-(exp(x%*%b1))/(1+exp(x%*%b1))
  P01<-p01*(1-p1)
  P00<-p00*(1-p1)
  P11<-p11*p1
  P10<-p10*p1
  p01<-mean(p01)
  p00<-mean(p00)
  p11<-mean(p11)
  p10<-mean(p10)
  P01<-mean(P01)
  P00<-mean(P00)
  P11<-mean(P11)
  P10<-mean(P10)
  GBBM.1.<-data.frame(b01,ob01,s01,pv01,b11,ob11,s11,pv11,b1,ob1,s1,pv1,chisq,Pval, p01,p00,p11,p10,P01,P00,P11,P10)
  return(list(
    chisq = chisq,
    p_value = Pval
  ))
}
fit_full_model_and_calculate_stat <- function(data) {
  full_model <- glm(y2 ~ x1 + y1 + x1 * y1, data = data, family = binomial)
  full_model_coefficients <- coef(full_model)
  coeff_y1_x1y1 <- full_model_coefficients[c("y1", "x1:y1")]
  var_cov_matrix_full <- vcov(full_model)
  last_2x2_matrix <- var_cov_matrix_full[3:4, 3:4]
  test_stat_gbmm <- t(coeff_y1_x1y1) %*% solve(last_2x2_matrix) %*% coeff_y1_x1y1
  
  list(
    var_cov_matrix_full = var_cov_matrix_full,
    last_2x2_matrix = last_2x2_matrix,
    coeff_y1_x1y1 = coeff_y1_x1y1,
    test_stat_gbmm = test_stat_gbmm
  )
}

results <- data.frame(
  sample_size = numeric(),
  beta_11 = numeric(),
  power_gbmm = numeric(),
  power_full_model = numeric()
)

for (sample_size in sample_sizes) {
  for (beta_difference in beta_differences) {
    beta_11 <- beta_01 + beta_difference
    power_gbmm <- 0
    power_full_model <- 0
    
    for (sim in 1:n_simulations) {
      data_list <- generate_data(sample_size, beta_01, beta_11)
      data <- data.frame(x1 = data_list$x1, y1 = data_list$y1, y2 = data_list$y2)
      
      # GBMM1 model
      gbmm_results <- GBBM1(x1 = data$x1, y1 = data$y1, y2 = data$y2, z = 2)
      p_value_gbmm <- gbmm_results$p_value
      
      # Full model
      full_model_results <- fit_full_model_and_calculate_stat(data)
      p_value_full_model <- pchisq(full_model_results$test_stat_gbmm, df = 2, lower.tail = FALSE)
      
      power_gbmm <- power_gbmm + (p_value_gbmm < 0.05)
      power_full_model <- power_full_model + (p_value_full_model < 0.05)
    }
    
    # Store average power
    results <- rbind(results, data.frame(
      sample_size = sample_size,
      beta_11 = beta_11,
      power_gbmm = power_gbmm / n_simulations,
      power_full_model = power_full_model / n_simulations
    ))
  }
}

# Print final results
print(results)

