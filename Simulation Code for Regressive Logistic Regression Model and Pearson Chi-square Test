# Load necessary libraries
library(stats)
library(ggplot2)

set.seed(123)

# Simulation parameters
n_simulations <- 1000
sample_sizes <- c(500, 1000, 1500, 2000)
alpha_01 <- 0.5
beta_01 <- 0.3
alpha_11 <- 0.5
alpha_1 <- 0.5
beta_differences <- seq(0.2, 0.5, by = 0.1)

# Function to generate data
generate_data <- function(N, beta_01, beta_11) {
  x1 <- rnorm(N)
  pi01 <- plogis(alpha_01 + beta_01 * x1)
  pi11 <- plogis(alpha_11 + beta_11 * x1)
  pi00 <- 1 - pi01
  pi10 <- 1 - pi11
  pi1 <- plogis(alpha_1 + 0.2 * x1)  # beta_1 fixed at 0.2
  P01 <- pi01 * (1 - pi1)
  P00 <- pi00 * (1 - pi1)
  P11 <- pi11 * pi1
  P10 <- pi10 * pi1
  P <- cbind(P01, P00, P11, P10)
  Y <- t(apply(P, 1, function(row_probs) rmultinom(1, n = 1, prob = row_probs)))
  
  y1 <- numeric(N)
  y2 <- numeric(N)
  for (i in 1:N) {
    if (Y[i, 1] == 1) { y1[i] <- 0; y2[i] <- 1 }
    else if (Y[i, 2] == 1) { y1[i] <- 0; y2[i] <- 0 }
    else if (Y[i, 3] == 1) { y1[i] <- 1; y2[i] <- 1 }
    else if (Y[i, 4] == 1) { y1[i] <- 1; y2[i] <- 0 }
  }
  return(data.frame(x1 = x1, y1 = y1, y2 = y2))
}

# Function to fit regressive logistic model and extract Wald test p-value
fit_regressive_logit <- function(data) {
  model <- glm(y2 ~ x1 + y1, family = binomial, data = data)
  beta_y1 <- coef(model)["y1"]
  var_y1 <- vcov(model)["y1", "y1"]
  test_stat <- (beta_y1)^2 / var_y1
  p_val <- pchisq(test_stat, df = 1, lower.tail = FALSE)
  return(p_val)
}

# Initialize results storage
results <- data.frame()

# Simulation loop
for (sample_size in sample_sizes) {
  for (beta_diff in beta_differences) {
    beta_11 <- beta_01 + beta_diff
    count_chisq <- 0
    count_reg_logit <- 0
    
    for (sim in 1:n_simulations) {
      data <- generate_data(sample_size, beta_01, beta_11)
      
      # Chi-square independence test
      chisq_p <- chisq.test(table(data$y1, data$y2))$p.value
      if (chisq_p < 0.05) count_chisq <- count_chisq + 1
      
      # Regressive logistic model test
      reg_logit_p <- fit_regressive_logit(data)
      if (reg_logit_p < 0.05) count_reg_logit <- count_reg_logit + 1
    }
    
    # Store power estimates
    results <- rbind(results, data.frame(
      sample_size = sample_size,
      beta_difference = beta_diff,
      power_chisq = count_chisq / n_simulations,
      power_regressive_logit = count_reg_logit / n_simulations
    ))
  }
}

# Display results
print(results)
